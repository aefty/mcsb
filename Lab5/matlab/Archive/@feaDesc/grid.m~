classdef des
% Property data is private to the class
   properties
      n;
      Points;
      Elements;
      PointMarker;
      ProblemString;
      Problem;
      dx;
      dy;
   end % properties

   methods
       %Constructor
       function this = grid(gridSize,ProblemString)
           this.n = gridSize;
           this.dx = 1/gridSize;
           this.dy = 1/gridSize;
           this.ProblemString = ProblemString;
       end
       
       %Quad Grid
       function this = quad(this)
           m=this.n;
           n=this.n;
           delta_x =this.dx; 
           delta_y =this.dy;
           Elements = zeros(n*m,4);
           Points = zeros((n+1)*(m+1),3);
           PointMarker = zeros((n+1)*(m+1),1);
           j = 0;i = 0;

           for row = 1:(n+1)
               for col = 1:(m+1)
                   if(row<=n && col<=m) 
                       j=j+1;       
                       Elements(j,:) = [
                            (row-1)*(m+1)+(col-1),
                            (row-1)*(m+1)+(col-1)+1,
                            (row-0)*(m+1)+(col-1)+1,
                            (row-0)*(m+1)+(col-1),
                            ];
                    end

                    i=i+1;        
                    Points(i,:) = [(col-1)+(col-1)*(delta_x-1),(row-1)+(row-1)*(delta_y-1),0]; 

                    %Find edge points of grid
                    if(mod(row-1,n)==0 || mod(col-1,n)==0 )
                       PointMarker(i,1) = 1; 
                    end

                end
            end

            %Matlab is base 1
            Elements=Elements+1;
            this.Points=Points;
            this.Elements=Elements;
            this.PointMarker=PointMarker;
       end
       
       %Tri Grid
       function this = tri(this)
           this = this.quad();
           
            QPoints=this.Points;
            QElements=this.Elements;
            QPointMarker=this.PointMarker;
           
          
           elSize = size(QElements,1)*2;
           Elements  = ones(elSize,3);

           for i = 1 : size(QElements,1)
               Elements(i,:) = [QElements(i,1),QElements(i,2),QElements(i,3)];
               Elements(elSize-i+1,:)=[QElements(i,1),QElements(i,3),QElements(i,4)];
           end

            this.Elements=Elements;
       end

       function this = descProblem(this)
            this.Problem=zeros(size(this.Points,1),1);
            this.Problem = this.Problem;
            
            for i = 1 : size(data,1)
               
                x = this.Points(i,1);
                y = this.Points(i,2);
                z = this.Points(i,3);
                             
                %Equation
                this.value(i,1) = eval(this.eqString);                
            end
       end 
       
   end  % methods
end % class